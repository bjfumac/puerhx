// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class HxOverrides {
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class StringTools {
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		buf_b += s == null ? "null" : "" + s;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
}
StringTools.__name__ = true;
var csharp_unityengine_Debug = require("csharp").UnityEngine.Debug;
class examples_async_Main {
	static main() {
		let test1 = new examples_async_TestInterval();
		let test2 = new examples_async_TestPromise();
		let test3 = new examples_async_TestAwait();
	}
}
examples_async_Main.__name__ = true;
class examples_async_TestAwait {
	constructor() {
		this.processAwait();
	}
	processAwait() {
		let _gthis = this;
		return tink_core_Future.async(function(__return) {
			try {
				csharp_unityengine_Debug.Log("Start sleep");
				_gthis.sleep().handle(function(__t0) {
					try {
						let __t0_result;
						let _g = tink_await_OutcomeTools.getOutcome(null,__t0);
						switch(_g._hx_index) {
						case 0:
							let v = _g.data;
							__t0_result = v;
							break;
						case 1:
							let e = _g.failure;
							__return(tink_core_Outcome.Failure(e));
							return;
						}
						let wait = __t0_result;
						csharp_unityengine_Debug.Log("Stop sleep after 5s");
						__return(tink_core_Outcome.Success(wait));
						return;
					} catch( _g ) {
						let e = haxe_Exception.caught(_g).unwrap();
						__return(tink_core_Outcome.Failure(e));
					}
				});
			} catch( _g ) {
				let e = haxe_Exception.caught(_g).unwrap();
				__return(tink_core_Outcome.Failure(e));
			}
		});
	}
	sleep() {
		return tink_core_Future.async(function(cb) {
			haxe_Timer.delay(function() {
				cb(true);
			},5000);
		});
	}
}
examples_async_TestAwait.__name__ = true;
Object.assign(examples_async_TestAwait.prototype, {
	__class__: examples_async_TestAwait
});
class examples_async_TestInterval {
	constructor() {
		this.counter = 0;
		haxe_Timer.delay(function() {
			csharp_unityengine_Debug.Log("Delay 1s");
		},1000);
		this.timer = new haxe_Timer(1000);
		let _gthis = this;
		this.timer.run = function() {
			let ret = _gthis.counter++;
			_gthis.counter = _gthis.counter | 0;
			csharp_unityengine_Debug.Log("After " + _gthis.counter + "s");
			if(_gthis.counter == 6) {
				csharp_unityengine_Debug.Log("Stop Interval after 6s");
				_gthis.timer.stop();
			}
		};
	}
}
examples_async_TestInterval.__name__ = true;
Object.assign(examples_async_TestInterval.prototype, {
	__class__: examples_async_TestInterval
});
class examples_async_TestPromise {
	constructor() {
		let p = this.createPromise();
		p.then(function(res) {
			csharp_unityengine_Debug.Log(res);
		});
	}
	createPromise() {
		let promise = new Promise(function(resolve,reject) {
			resolve("promise resolved");
		});
		return promise;
	}
}
examples_async_TestPromise.__name__ = true;
Object.assign(examples_async_TestPromise.prototype, {
	__class__: examples_async_TestPromise
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_IMap {
}
haxe_IMap.__name__ = true;
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = true;
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
}
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let n = e.__constructs__[o._hx_index];
				let con = e[n];
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
class tink_await_Error {
	static fromAny(any) {
		if(((any) instanceof tink_core_TypedError)) {
			return any;
		} else {
			return tink_core_TypedError.withData(0,"Unexpected Error",any,{ fileName : "tink/await/Error.hx", lineNumber : 12, className : "tink.await._Error.Error_Impl_", methodName : "fromAny"});
		}
	}
	static unwrap(e) {
		if(e.code == 0) {
			return e.data;
		} else {
			return e;
		}
	}
}
class tink_await_OutcomeTools {
	static getOutcome(outcome,value) {
		if(outcome == null) {
			return tink_core_Outcome.Success(value);
		} else {
			switch(outcome._hx_index) {
			case 0:
				let v = outcome.data;
				return outcome;
			case 1:
				let _g = outcome.failure;
				let e = _g;
				if(((e) instanceof tink_core_TypedError)) {
					return outcome;
				} else {
					let e = _g;
					return tink_core_Outcome.Failure(tink_await_Error.fromAny(e));
				}
				break;
			}
		}
	}
}
tink_await_OutcomeTools.__name__ = true;
class tink_core_Annex {
	constructor(target) {
		this.target = target;
		this.registry = new haxe_ds_ObjectMap();
	}
}
tink_core_Annex.__name__ = true;
Object.assign(tink_core_Annex.prototype, {
	__class__: tink_core_Annex
});
class tink_core_Callback {
	static _new(f) {
		let this1 = f;
		return this1;
	}
	static toFunction(this1) {
		return this1;
	}
	static invoke(this1,data) {
		if(tink_core_Callback.depth < 500) {
			tink_core_Callback.depth++;
			this1(data);
			tink_core_Callback.depth--;
		} else {
			let _e = this1;
			let _g = function(data) {
				tink_core_Callback.invoke(_e,data);
			};
			let data1 = data;
			tink_core_Callback.defer(function() {
				_g(data1);
			});
		}
	}
	static ignore(cb) {
		return function(_) {
			tink_core_Callback.invoke(cb,tink_core_Noise.Noise);
		};
	}
	static fromNiladic(f) {
		return f;
	}
	static fromMany(callbacks) {
		return function(v) {
			let _g = 0;
			while(_g < callbacks.length) {
				let callback = callbacks[_g];
				++_g;
				tink_core_Callback.invoke(callback,v);
			}
		};
	}
	static defer(f) {
		haxe_Timer.delay(f,0);
	}
}
class tink_core_LinkObject {
}
tink_core_LinkObject.__name__ = true;
Object.assign(tink_core_LinkObject.prototype, {
	__class__: tink_core_LinkObject
});
class tink_core_CallbackLink {
	static _new(link) {
		let this1 = new tink_core_SimpleLink(link);
		return this1;
	}
	static cancel(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static dissolve(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static noop() {
	}
	static toFunction(this1) {
		if(this1 == null) {
			return tink_core_CallbackLink.noop;
		} else {
			return $bind(this1,this1.cancel);
		}
	}
	static toCallback(this1) {
		return function(_) {
			this1.cancel();
		};
	}
	static fromFunction(f) {
		let this1 = new tink_core_SimpleLink(f);
		return this1;
	}
	static join(a,b) {
		return new tink_core__$Callback_LinkPair(a,b);
	}
	static fromMany(callbacks) {
		let this1 = new tink_core_SimpleLink(function() {
			if(callbacks != null) {
				let _g = 0;
				while(_g < callbacks.length) {
					let cb = callbacks[_g];
					++_g;
					if(cb != null) {
						cb.cancel();
					}
				}
			} else {
				callbacks = null;
			}
		});
		return this1;
	}
}
class tink_core_SimpleLink {
	constructor(f) {
		this.f = f;
	}
	cancel() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
}
tink_core_SimpleLink.__name__ = true;
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core_SimpleLink.prototype, {
	__class__: tink_core_SimpleLink
});
class tink_core__$Callback_LinkPair {
	constructor(a,b) {
		this.dissolved = false;
		this.a = a;
		this.b = b;
	}
	cancel() {
		if(!this.dissolved) {
			this.dissolved = true;
			let this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			let this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
}
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_LinkPair.prototype, {
	__class__: tink_core__$Callback_LinkPair
});
class tink_core__$Callback_ListCell {
	constructor(cb,list) {
		if(cb == null) {
			throw haxe_Exception.thrown("callback expected but null received");
		}
		this.cb = cb;
		this.list = list;
	}
	invoke(data) {
		if(this.list != null) {
			tink_core_Callback.invoke(this.cb,data);
		}
	}
	clear() {
		this.cb = null;
		this.list = null;
	}
	cancel() {
		if(this.list != null) {
			let list = this.list;
			this.cb = null;
			this.list = null;
			if(--list.used <= list.cells.length >> 1) {
				list.compact();
			}
		}
	}
}
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_ListCell.prototype, {
	__class__: tink_core__$Callback_ListCell
});
class tink_core_CallbackList {
	constructor() {
		this.busy = false;
		this.queue = [];
		this.used = 0;
		this.cells = [];
	}
	ondrain() {
	}
	onfill() {
	}
	get_length() {
		return this.used;
	}
	release() {
		if(--this.used <= this.cells.length >> 1) {
			this.compact();
		}
	}
	add(cb) {
		let node = new tink_core__$Callback_ListCell(cb,this);
		this.cells.push(node);
		if(this.used++ == 0) {
			this.onfill();
		}
		return node;
	}
	invoke(data,destructive) {
		if(this.busy) {
			let _g = $bind(this,this.invoke);
			let data1 = data;
			let destructive1 = destructive;
			let tmp = function() {
				_g(data1,destructive1);
			};
			this.queue.push(tmp);
		} else {
			this.busy = true;
			let length = this.cells.length;
			let _g = 0;
			let _g1 = length;
			while(_g < _g1) {
				let i = _g++;
				let _this = this.cells[i];
				if(_this.list != null) {
					tink_core_Callback.invoke(_this.cb,data);
				}
			}
			this.busy = false;
			if(destructive) {
				let added = this.cells.length - length;
				let _g = 0;
				let _g1 = length;
				while(_g < _g1) {
					let i = _g++;
					let _this = this.cells[i];
					_this.cb = null;
					_this.list = null;
				}
				let _g2 = 0;
				let _g3 = added;
				while(_g2 < _g3) {
					let i = _g2++;
					this.cells[i] = this.cells[length + i];
				}
				this.resize(added);
			} else if(this.used < this.cells.length) {
				this.compact();
			}
			if(this.queue.length > 0) {
				(this.queue.shift())();
			}
		}
	}
	compact() {
		if(this.busy) {
			return;
		} else if(this.used == 0) {
			this.resize(0);
			this.ondrain();
		} else {
			let compacted = 0;
			let _g = 0;
			let _g1 = this.cells.length;
			while(_g < _g1) {
				let i = _g++;
				let _g1 = this.cells[i];
				let _g2 = _g1.list;
				if(_g1.cb != null) {
					let v = _g1;
					if(compacted != i) {
						this.cells[compacted] = v;
					}
					if(++compacted == this.used) {
						break;
					}
				}
			}
			this.resize(this.used);
		}
	}
	resize(length) {
		this.cells.length = length;
	}
	clear() {
		if(this.busy) {
			this.queue.push($bind(this,this.clear));
		}
		let _g = 0;
		let _g1 = this.cells;
		while(_g < _g1.length) {
			let cell = _g1[_g];
			++_g;
			cell.cb = null;
			cell.list = null;
		}
		this.resize(0);
	}
}
tink_core_CallbackList.__name__ = true;
Object.assign(tink_core_CallbackList.prototype, {
	__class__: tink_core_CallbackList
});
class tink_core_TypedError {
	constructor(code,message,pos) {
		if(code == null) {
			code = 500;
		}
		this.isTinkError = true;
		this.code = code;
		this.message = message;
		this.pos = pos;
		this.exceptionStack = [];
		this.callStack = [];
	}
	printPos() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	toString() {
		let ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	throwSelf() {
		let any = this;
		throw haxe_Exception.thrown(any);
	}
	static withData(code,message,data,pos) {
		return tink_core_TypedError.typed(code,message,data,pos);
	}
	static typed(code,message,data,pos) {
		let ret = new tink_core_TypedError(code,message,pos);
		ret.data = data;
		return ret;
	}
	static ofJsError(e,pos) {
		return tink_core_TypedError.withData(500,e.message,e,pos);
	}
	static asError(v) {
		if(v != null && v.isTinkError) {
			return v;
		} else {
			return null;
		}
	}
	static catchExceptions(f,report,pos) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( _g ) {
			let e = haxe_Exception.caught(_g).unwrap();
			let _g1 = tink_core_TypedError.asError(e);
			let tmp;
			if(_g1 == null) {
				tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e);
			} else {
				let e = _g1;
				tmp = e;
			}
			return tink_core_Outcome.Failure(tmp);
		}
	}
	static reporter(code,message,pos) {
		return function(e) {
			return tink_core_TypedError.withData(code,message,e,pos);
		};
	}
	static rethrow(any) {
		throw haxe_Exception.thrown(any);
	}
	static tryFinally(f,cleanup) {
		try { return f(); } finally { cleanup(); }
		return null;
	}
}
tink_core_TypedError.__name__ = true;
Object.assign(tink_core_TypedError.prototype, {
	__class__: tink_core_TypedError
});
class tink_core_Stack {
	static toString(this1) {
		return "Error stack not available. Compile with -D error_stack.";
	}
}
class tink_core_FutureObject {
}
tink_core_FutureObject.__name__ = true;
Object.assign(tink_core_FutureObject.prototype, {
	__class__: tink_core_FutureObject
});
class tink_core__$Future_NeverFuture {
	constructor() {
	}
	map(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	flatMap(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	handle(callback) {
		return null;
	}
	gather() {
		return tink_core__$Future_NeverFuture.inst;
	}
	eager() {
		return tink_core__$Future_NeverFuture.inst;
	}
}
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_NeverFuture.prototype, {
	__class__: tink_core__$Future_NeverFuture
});
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
class tink_core__$Lazy_LazyObject {
}
tink_core__$Lazy_LazyObject.__name__ = true;
Object.assign(tink_core__$Lazy_LazyObject.prototype, {
	__class__: tink_core__$Lazy_LazyObject
});
class tink_core__$Lazy_LazyConst {
	constructor(value) {
		this.value = value;
	}
	get() {
		return this.value;
	}
	map(f) {
		let _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	flatMap(f) {
		let _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
}
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyConst.prototype, {
	__class__: tink_core__$Lazy_LazyConst
});
class tink_core__$Future_SyncFuture {
	constructor(value) {
		this.value = value;
	}
	map(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	flatMap(f) {
		let _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f(_gthis.value.get()).handle($yield);
		});
	}
	handle(cb) {
		tink_core_Callback.invoke(cb,this.value.get());
		return null;
	}
	eager() {
		return this;
	}
	gather() {
		return this;
	}
}
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_SyncFuture.prototype, {
	__class__: tink_core__$Future_SyncFuture
});
class tink_core_Future {
	static _new(f) {
		let this1 = new tink_core__$Future_SuspendableFuture(f);
		return this1;
	}
	static first(this1,other) {
		let ret = new tink_core_FutureTrigger();
		let l1 = this1.handle($bind(ret,ret.trigger));
		let l2 = other.handle($bind(ret,ret.trigger));
		let ret1 = ret;
		if(l1 != null) {
			let this1 = l1;
			ret1.handle(function(_) {
				this1.cancel();
			});
		}
		if(l2 != null) {
			let this1 = l2;
			ret1.handle(function(_) {
				this1.cancel();
			});
		}
		return ret1;
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		let ret = this1.map(f);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatMap(this1,next,gather) {
		if(gather == null) {
			gather = true;
		}
		let ret = this1.flatMap(next);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static next(this1,n) {
		return this1.flatMap(function(v) {
			return n(v);
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		let gather1 = gather;
		if(gather1 == null) {
			gather1 = true;
		}
		let ret = this1.flatMap(function(t) {
			let gather = false;
			if(gather == null) {
				gather = true;
			}
			let ret = other.map(function(a) {
				return merger(t,a);
			});
			if(gather) {
				return ret.gather();
			} else {
				return ret;
			}
		});
		if(gather1) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatten(f) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			let inner = null;
			let outer = f.handle(function(second) {
				inner = second.handle($yield);
			});
			let this1 = new tink_core_SimpleLink(function() {
				if(inner != null) {
					inner.cancel();
				}
			});
			return new tink_core__$Callback_LinkPair(outer,this1);
		});
	}
	static ofJsPromise(promise) {
		return tink_core_Future.async(function(cb) {
			promise.then(function(a) {
				cb(tink_core_Outcome.Success(a));
			}).catch(function(e) {
				cb(tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 89, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"})));
			});
		});
	}
	static ofAny(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static asPromise(s) {
		return s;
	}
	static ofMany(futures,gather) {
		if(gather == null) {
			gather = true;
		}
		let ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
		let _g = 0;
		while(_g < futures.length) {
			let f = futures[_g];
			++_g;
			let gather = false;
			if(gather == null) {
				gather = true;
			}
			let ret1 = ret.flatMap(function(results) {
				let gather = false;
				if(gather == null) {
					gather = true;
				}
				let ret = f.map(function(result) {
					return results.concat([result]);
				});
				if(gather) {
					return ret.gather();
				} else {
					return ret;
				}
			});
			ret = gather ? ret1.gather() : ret1;
		}
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static fromMany(futures) {
		return tink_core_Future.ofMany(futures);
	}
	static lazy(l) {
		return new tink_core__$Future_SyncFuture(l);
	}
	static sync(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static isFuture(maybeFuture) {
		return js_Boot.__implements(maybeFuture,tink_core_FutureObject);
	}
	static async(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		if(lazy) {
			return new tink_core__$Future_SuspendableFuture(function($yield) {
				f($yield);
				return null;
			});
		} else {
			let op = new tink_core_FutureTrigger();
			let wrapped = f;
			tink_core_Callback.invoke(wrapped,$bind(op,op.trigger));
			return op;
		}
	}
	static or(a,b) {
		return tink_core_Future.first(a,b);
	}
	static either(a,b) {
		let gather = false;
		if(gather == null) {
			gather = true;
		}
		let ret = a.map(haxe_ds_Either.Left);
		let tmp = gather ? ret.gather() : ret;
		let gather1 = false;
		if(gather1 == null) {
			gather1 = true;
		}
		let ret1 = b.map(haxe_ds_Either.Right);
		return tink_core_Future.first(tmp,gather1 ? ret1.gather() : ret1);
	}
	static and(a,b) {
		return tink_core_Future.merge(a,b,function(a,b) {
			let this1 = new tink_core_MPair(a,b);
			return this1;
		});
	}
	static _tryFailingFlatMap(f,map) {
		let ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				return map(d);
			case 1:
				let f = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
			}
		});
		return ret.gather();
	}
	static _tryFlatMap(f,map) {
		let ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				let ret = map(d).map(tink_core_Outcome.Success);
				return ret.gather();
			case 1:
				let f = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f)));
			}
		});
		return ret.gather();
	}
	static _tryFailingMap(f,map) {
		let ret = f.map(function(o) {
			return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper.withSameError(map));
		});
		return ret.gather();
	}
	static _tryMap(f,map) {
		let ret = f.map(function(o) {
			return tink_core_OutcomeTools.map(o,map);
		});
		return ret.gather();
	}
	static _flatMap(f,map) {
		let ret = f.flatMap(map);
		return ret.gather();
	}
	static _map(f,map) {
		let ret = f.map(map);
		return ret.gather();
	}
	static trigger() {
		return new tink_core_FutureTrigger();
	}
	static delay(ms,value) {
		return tink_core_Future.async(function(cb) {
			haxe_Timer.delay(function() {
				cb(value.get());
			},ms);
		});
	}
}
class tink_core_FutureTrigger {
	constructor() {
		this.list = new tink_core_CallbackList();
	}
	handle(callback) {
		let _g = this.list;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			let v = _g;
			let node = new tink_core__$Callback_ListCell(callback,v);
			v.cells.push(node);
			if(v.used++ == 0) {
				v.onfill();
			}
			return node;
		}
	}
	map(f) {
		let _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			let v = _g;
			let ret = new tink_core_FutureTrigger();
			let _this = this.list;
			let node = new tink_core__$Callback_ListCell(function(v) {
				ret.trigger(f(v));
			},_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			return ret;
		}
	}
	flatMap(f) {
		let _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			let v = _g;
			let ret = new tink_core_FutureTrigger();
			let _this = this.list;
			let node = new tink_core__$Callback_ListCell(function(v) {
				f(v).handle($bind(ret,ret.trigger));
			},_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			return ret;
		}
	}
	gather() {
		return this;
	}
	eager() {
		return this;
	}
	asFuture() {
		return this;
	}
	trigger(result) {
		if(this.list == null) {
			return false;
		} else {
			let list = this.list;
			this.list = null;
			this.result = result;
			list.invoke(result,true);
			return true;
		}
	}
	static gatherFuture(f) {
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return f.handle($yield);
		});
	}
}
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core_FutureTrigger.prototype, {
	__class__: tink_core_FutureTrigger
});
class tink_core_JsPromiseTools {
	static toSurprise(promise) {
		return tink_core_Future.ofJsPromise(promise);
	}
	static toPromise(promise) {
		return tink_core_Future.ofJsPromise(promise);
	}
}
tink_core_JsPromiseTools.__name__ = true;
class tink_core__$Future_SuspendableFuture {
	constructor(wakeup) {
		this.suspended = true;
		let _gthis = this;
		this.wakeup = wakeup;
		this.callbacks = new tink_core_CallbackList();
		this.callbacks.ondrain = function() {
			if(_gthis.callbacks != null) {
				_gthis.suspended = true;
				let this1 = _gthis.link;
				if(this1 != null) {
					this1.cancel();
				}
				_gthis.link = null;
			}
		};
	}
	trigger(value) {
		let _g = this.callbacks;
		if(_g != null) {
			let list = _g;
			this.callbacks = null;
			this.suspended = false;
			this.result = value;
			this.link = null;
			this.wakeup = null;
			list.invoke(value,true);
		}
	}
	handle(callback) {
		let _g = this.callbacks;
		if(_g == null) {
			tink_core_Callback.invoke(callback,this.result);
			return null;
		} else {
			let v = _g;
			let _this = this.callbacks;
			let node = new tink_core__$Callback_ListCell(callback,_this);
			_this.cells.push(node);
			if(_this.used++ == 0) {
				_this.onfill();
			}
			let ret = node;
			if(this.suspended) {
				this.suspended = false;
				this.link = this.wakeup($bind(this,this.trigger));
			}
			return ret;
		}
	}
	map(f) {
		let _gthis = this;
		return new tink_core__$Future_SuspendableFuture(function($yield) {
			return _gthis.handle(function(res) {
				$yield(f(res));
			});
		});
	}
	flatMap(f) {
		return tink_core_Future.flatten(this.map(f));
	}
	gather() {
		return this;
	}
	eager() {
		this.handle(tink_core_Callback.fromNiladic(function() {
		}));
		return this;
	}
}
tink_core__$Future_SuspendableFuture.__name__ = true;
tink_core__$Future_SuspendableFuture.__interfaces__ = [tink_core_FutureObject];
Object.assign(tink_core__$Future_SuspendableFuture.prototype, {
	__class__: tink_core__$Future_SuspendableFuture
});
class tink_core_Lazy {
	static get(this1) {
		return this1.get();
	}
	static ofFunc(f) {
		return new tink_core__$Lazy_LazyFunc(f);
	}
	static map(this1,f) {
		return this1.map(f);
	}
	static flatMap(this1,f) {
		return this1.flatMap(f);
	}
	static ofConst(c) {
		return new tink_core__$Lazy_LazyConst(c);
	}
}
class tink_core__$Lazy_LazyFunc {
	constructor(f) {
		this.f = f;
	}
	get() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	map(f) {
		let _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get());
		});
	}
	flatMap(f) {
		let _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.get()).get();
		});
	}
}
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyFunc.prototype, {
	__class__: tink_core__$Lazy_LazyFunc
});
class tink_core_NamedWith {
	constructor(name,value) {
		this.name = name;
		this.value = value;
	}
}
tink_core_NamedWith.__name__ = true;
Object.assign(tink_core_NamedWith.prototype, {
	__class__: tink_core_NamedWith
});
class tink_core_OptionTools {
	static force(o,pos) {
		if(o._hx_index == 0) {
			let v = o.v;
			return v;
		} else {
			throw haxe_Exception.thrown(new tink_core_TypedError(404,"Some value expected but none found",pos));
		}
	}
	static or(o,l) {
		if(o._hx_index == 0) {
			let v = o.v;
			return v;
		} else {
			return l.get();
		}
	}
	static orNull(o) {
		if(o._hx_index == 0) {
			let v = o.v;
			return v;
		} else {
			return null;
		}
	}
	static filter(o,f) {
		if(o._hx_index == 0) {
			if(f(o.v) == false) {
				return haxe_ds_Option.None;
			} else {
				return o;
			}
		} else {
			return o;
		}
	}
	static satisfies(o,f) {
		if(o._hx_index == 0) {
			let v = o.v;
			return f(v);
		} else {
			return false;
		}
	}
	static equals(o,v) {
		if(o._hx_index == 0) {
			let v1 = o.v;
			return v1 == v;
		} else {
			return false;
		}
	}
	static map(o,f) {
		if(o._hx_index == 0) {
			let v = o.v;
			return haxe_ds_Option.Some(f(v));
		} else {
			return haxe_ds_Option.None;
		}
	}
	static flatMap(o,f) {
		if(o._hx_index == 0) {
			let v = o.v;
			return f(v);
		} else {
			return haxe_ds_Option.None;
		}
	}
	static iterator(o) {
		return new tink_core_OptionIter(o);
	}
	static toArray(o) {
		if(o._hx_index == 0) {
			let v = o.v;
			return [v];
		} else {
			return [];
		}
	}
}
tink_core_OptionTools.__name__ = true;
class tink_core_OptionIter {
	constructor(o) {
		this.alive = true;
		if(o._hx_index == 0) {
			let v = o.v;
			this.value = v;
		} else {
			this.alive = false;
		}
	}
	hasNext() {
		return this.alive;
	}
	next() {
		this.alive = false;
		return this.value;
	}
}
tink_core_OptionIter.__name__ = true;
Object.assign(tink_core_OptionIter.prototype, {
	__class__: tink_core_OptionIter
});
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
class tink_core_OutcomeTools {
	static sure(outcome) {
		switch(outcome._hx_index) {
		case 0:
			let data = outcome.data;
			return data;
		case 1:
			let failure = outcome.failure;
			let _g = tink_core_TypedError.asError(failure);
			if(_g == null) {
				throw haxe_Exception.thrown(failure);
			} else {
				let e = _g;
				return e.throwSelf();
			}
			break;
		}
	}
	static toOption(outcome) {
		switch(outcome._hx_index) {
		case 0:
			let data = outcome.data;
			return haxe_ds_Option.Some(data);
		case 1:
			let _g = outcome.failure;
			return haxe_ds_Option.None;
		}
	}
	static toOutcome(option,pos) {
		switch(option._hx_index) {
		case 0:
			let value = option.v;
			return tink_core_Outcome.Success(value);
		case 1:
			return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 48, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
		}
	}
	static orNull(outcome) {
		switch(outcome._hx_index) {
		case 0:
			let data = outcome.data;
			return data;
		case 1:
			let _g = outcome.failure;
			return null;
		}
	}
	static orUse(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			let data = outcome.data;
			return data;
		case 1:
			let _g = outcome.failure;
			return fallback.get();
		}
	}
	static orTry(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			let _g = outcome.data;
			return outcome;
		case 1:
			let _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static equals(outcome,to) {
		switch(outcome._hx_index) {
		case 0:
			let data = outcome.data;
			return data == to;
		case 1:
			let _g = outcome.failure;
			return false;
		}
	}
	static map(outcome,transform) {
		switch(outcome._hx_index) {
		case 0:
			let a = outcome.data;
			return tink_core_Outcome.Success(transform(a));
		case 1:
			let f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static isSuccess(outcome) {
		if(outcome._hx_index == 0) {
			let _g = outcome.data;
			return true;
		} else {
			return false;
		}
	}
	static flatMap(o,mapper) {
		return tink_core__$Outcome_OutcomeMapper.apply(mapper,o);
	}
	static swap(outcome,v) {
		switch(outcome._hx_index) {
		case 0:
			let a = outcome.data;
			return tink_core_Outcome.Success(v);
		case 1:
			let f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static next(outcome,f) {
		switch(outcome._hx_index) {
		case 0:
			let v = outcome.data;
			return f(v);
		case 1:
			let e = outcome.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
		}
	}
	static attempt(f,report) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( _g ) {
			let e = haxe_Exception.caught(_g).unwrap();
			return tink_core_Outcome.Failure(report(e));
		}
	}
	static flatten(o) {
		switch(o._hx_index) {
		case 0:
			let _g = o.data;
			switch(_g._hx_index) {
			case 0:
				let d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				let f = _g.failure;
				return tink_core_Outcome.Failure(f);
			}
			break;
		case 1:
			let f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	}
}
tink_core_OutcomeTools.__name__ = true;
class tink_core__$Outcome_OutcomeMapper {
	static _new(f) {
		let this1 = { f : f};
		return this1;
	}
	static apply(this1,o) {
		return this1.f(o);
	}
	static withSameError(f) {
		return tink_core__$Outcome_OutcomeMapper._new(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				return f(d);
			case 1:
				let f1 = o.failure;
				return tink_core_Outcome.Failure(f1);
			}
		});
	}
	static withEitherError(f) {
		return tink_core__$Outcome_OutcomeMapper._new(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				let _g = f(d);
				switch(_g._hx_index) {
				case 0:
					let d1 = _g.data;
					return tink_core_Outcome.Success(d1);
				case 1:
					let f1 = _g.failure;
					return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
				}
				break;
			case 1:
				let f2 = o.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
			}
		});
	}
}
class tink_core_Pair {
	static _new(a,b) {
		let this1 = new tink_core_MPair(a,b);
		return this1;
	}
	static get_a(this1) {
		return this1.a;
	}
	static get_b(this1) {
		return this1.b;
	}
	static toBool(this1) {
		return this1 != null;
	}
	static isNil(this1) {
		return this1 == null;
	}
	static nil() {
		return null;
	}
}
class tink_core_MPair {
	constructor(a,b) {
		this.a = a;
		this.b = b;
	}
}
tink_core_MPair.__name__ = true;
Object.assign(tink_core_MPair.prototype, {
	__class__: tink_core_MPair
});
class tink_core_Progress {
	static trigger() {
		return new tink_core_ProgressTrigger();
	}
	static make(f) {
		let value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
		let signal = tink_core_Signal.trigger();
		let future = tink_core_Future.async(function(cb) {
			let progress = function(v,total) {
				switch(value._hx_index) {
				case 0:
					let current = value.v;
					if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
						let this1 = new tink_core_MPair(v,total);
						let pv = this1;
						value = tink_core_ProgressType.InProgress(pv);
						signal.handlers.invoke(pv);
					}
					break;
				case 1:
					let _g = value.v;
					break;
				}
			};
			let finish = function(v) {
				if(value._hx_index == 1) {
					let _g = value.v;
				} else {
					value = tink_core_ProgressType.Finished(v);
					cb(v);
				}
			};
			f(progress,finish);
		});
		return new tink_core_CompositeProgress(future,signal);
	}
	static asFuture(this1) {
		return this1;
	}
	static asPromise(p) {
		return p;
	}
	static promise(v) {
		return new tink_core_PromiseProgress(v);
	}
	static future(v) {
		return new tink_core_FutureProgress(v);
	}
	static next(this1,f) {
		return tink_core_Future.next(this1,f);
	}
}
class tink_core_SignalObject {
}
tink_core_SignalObject.__name__ = true;
Object.assign(tink_core_SignalObject.prototype, {
	__class__: tink_core_SignalObject
});
class tink_core_ProgressObject {
}
tink_core_ProgressObject.__name__ = true;
tink_core_ProgressObject.__interfaces__ = [tink_core_SignalObject,tink_core_FutureObject];
class tink_core_CompositeProgress {
	constructor(future,signal) {
		if(tink_core_CompositeProgress._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(future,signal);
	}
	_hx_constructor(future,signal) {
		this.future = future;
		this.signal = signal;
	}
	map(f) {
		let ret = this.future.map(f);
		return ret.gather();
	}
	flatMap(f) {
		let ret = this.future.flatMap(f);
		return ret.gather();
	}
	handle(callback) {
		return this.future.handle(callback);
	}
	listen(callback) {
		return this.signal.listen(callback);
	}
	gather() {
		return this.future.gather();
	}
	eager() {
		return this.future.eager();
	}
}
tink_core_CompositeProgress.__name__ = true;
tink_core_CompositeProgress.__interfaces__ = [tink_core_ProgressObject];
Object.assign(tink_core_CompositeProgress.prototype, {
	__class__: tink_core_CompositeProgress
});
class tink_core_ProgressTrigger extends tink_core_CompositeProgress {
	constructor() {
		tink_core_CompositeProgress._hx_skip_constructor = true;
		super();
		tink_core_CompositeProgress._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.value = tink_core_ProgressType.InProgress(tink_core_Progress.INIT);
		super._hx_constructor(this.futureTrigger = new tink_core_FutureTrigger(),this.signalTrigger = tink_core_Signal.trigger());
	}
	progress(v,total) {
		let _g = this.value;
		switch(_g._hx_index) {
		case 0:
			let current = _g.v;
			if(current.a != v || !tink_core_TotalTools.eq(current.b,total)) {
				let this1 = new tink_core_MPair(v,total);
				let pv = this1;
				this.value = tink_core_ProgressType.InProgress(pv);
				this.signalTrigger.handlers.invoke(pv);
			}
			break;
		case 1:
			let _g1 = _g.v;
			break;
		}
	}
	finish(v) {
		let _g = this.value;
		if(_g._hx_index == 1) {
			let _g1 = _g.v;
		} else {
			this.value = tink_core_ProgressType.Finished(v);
			this.futureTrigger.trigger(v);
		}
	}
	asProgress() {
		return this;
	}
}
tink_core_ProgressTrigger.__name__ = true;
tink_core_ProgressTrigger.__super__ = tink_core_CompositeProgress;
Object.assign(tink_core_ProgressTrigger.prototype, {
	__class__: tink_core_ProgressTrigger
});
class tink_core_FutureProgress extends tink_core_CompositeProgress {
	constructor(future) {
		let ret = future.flatMap(function(progress) {
			return progress;
		});
		super(ret.gather(),tink_core_Signal.generate(function(cb) {
			future.handle(function(progress) {
				progress.listen(cb);
			});
		}));
	}
}
tink_core_FutureProgress.__name__ = true;
tink_core_FutureProgress.__super__ = tink_core_CompositeProgress;
Object.assign(tink_core_FutureProgress.prototype, {
	__class__: tink_core_FutureProgress
});
class tink_core_PromiseProgress extends tink_core_CompositeProgress {
	constructor(promise) {
		let ret = promise.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				let progress = o.data;
				return progress.map(tink_core_Outcome.Success);
			case 1:
				let e = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
		});
		super(ret.gather(),tink_core_Signal.generate(function(cb) {
			promise.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					let progress = o.data;
					progress.listen(cb);
					break;
				case 1:
					let e = o.failure;
					break;
				}
			});
		}));
	}
}
tink_core_PromiseProgress.__name__ = true;
tink_core_PromiseProgress.__super__ = tink_core_CompositeProgress;
Object.assign(tink_core_PromiseProgress.prototype, {
	__class__: tink_core_PromiseProgress
});
class tink_core_ProgressValue {
	static _new(value,total) {
		let this1 = new tink_core_MPair(value,total);
		let this2 = this1;
		return this2;
	}
	static normalize(this1) {
		let o = this1.b;
		if(o._hx_index == 0) {
			let v = o.v;
			return haxe_ds_Option.Some(this1.a / v);
		} else {
			return haxe_ds_Option.None;
		}
	}
	static get_value(this1) {
		return this1.a;
	}
	static get_total(this1) {
		return this1.b;
	}
}
class tink_core_UnitInterval {
	static toPercentageString(this1,dp) {
		let m = Math.pow(10,dp);
		let v = Math.round(this1 * m * 100) / m;
		let s = v == null ? "null" : "" + v;
		let _g = s.indexOf(".");
		if(_g == -1) {
			return s + "." + StringTools.lpad("","0",dp) + "%";
		} else {
			let i = _g;
			if(s.length - i > dp) {
				return HxOverrides.substr(s,0,dp + i + 1) + "%";
			} else {
				let i = _g;
				return StringTools.rpad(s,"0",i + dp + 1) + "%";
			}
		}
	}
}
var tink_core_ProgressType = $hxEnums["tink.core.ProgressType"] = { __ename__ : true, __constructs__ : ["InProgress","Finished"]
	,InProgress: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Finished: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"tink.core.ProgressType",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class tink_core_TotalTools {
	static eq(a,b) {
		switch(a._hx_index) {
		case 0:
			if(b._hx_index == 0) {
				let t1 = a.v;
				let t2 = b.v;
				return t1 == t2;
			} else {
				return false;
			}
			break;
		case 1:
			if(b._hx_index == 1) {
				return true;
			} else {
				return false;
			}
			break;
		}
	}
}
tink_core_TotalTools.__name__ = true;
class tink_core_Promise {
	static _new(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		let this1 = tink_core_Future.async(function(cb) {
			f(function(v) {
				cb(tink_core_Outcome.Success(v));
			},function(e) {
				cb(tink_core_Outcome.Failure(e));
			});
		},lazy);
		return this1;
	}
	static eager(this1) {
		return this1.eager();
	}
	static map(this1,f) {
		let ret = this1.map(f);
		return ret.gather();
	}
	static flatMap(this1,f) {
		let ret = this1.flatMap(f);
		return ret.gather();
	}
	static tryRecover(this1,f) {
		let ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				let e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static recover(this1,f) {
		let ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				let e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static mapError(this1,f) {
		let ret = this1.map(function(o) {
			switch(o._hx_index) {
			case 0:
				let _g = o.data;
				return o;
			case 1:
				let e = o.failure;
				return tink_core_Outcome.Failure(f(e));
			}
		});
		return ret.gather();
	}
	static handle(this1,cb) {
		return this1.handle(cb);
	}
	static noise(this1) {
		return tink_core_Promise.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
		});
	}
	static isSuccess(this1) {
		let ret = this1.map(function(o) {
			return tink_core_OutcomeTools.isSuccess(o);
		});
		return ret.gather();
	}
	static next(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		let gather1 = gather;
		if(gather1 == null) {
			gather1 = true;
		}
		let ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				let d = o.data;
				return f(d);
			case 1:
				let f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		if(gather1) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static swap(this1,v) {
		return tink_core_Future._tryMap(this1,function(_) {
			return v;
		});
	}
	static swapError(this1,e) {
		return tink_core_Promise.mapError(this1,function(_) {
			return e;
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		return tink_core_Promise.next(this1,function(t) {
			return tink_core_Promise.next(other,function(a) {
				return merger(t,a);
			},false);
		},gather);
	}
	static and(a,b) {
		return tink_core_Promise.merge(a,b,function(a,b) {
			let this1 = new tink_core_MPair(a,b);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
		});
	}
	static iterate(promises,$yield,fallback,lazy) {
		return tink_core_Future.async(function(cb) {
			let iter = $getIterator(promises);
			let next = null;
			next = function() {
				if(iter.hasNext()) {
					iter.next().handle(function(o) {
						switch(o._hx_index) {
						case 0:
							let v = o.data;
							$yield(v).handle(function(o) {
								switch(o._hx_index) {
								case 0:
									let _g = o.data;
									switch(_g._hx_index) {
									case 0:
										let ret = _g.v;
										cb(tink_core_Outcome.Success(ret));
										break;
									case 1:
										next();
										break;
									}
									break;
								case 1:
									let e = o.failure;
									cb(tink_core_Outcome.Failure(e));
									break;
								}
							});
							break;
						case 1:
							let e = o.failure;
							cb(tink_core_Outcome.Failure(e));
							break;
						}
					});
				} else {
					fallback.handle(cb);
				}
			};
			next();
		},lazy);
	}
	static retry(gen,next) {
		let stamp = function() {
			return HxOverrides.now() / 1000 * 1000;
		};
		let start = stamp();
		let attempt = null;
		attempt = function(count) {
			let f = function(error) {
				return tink_core_Promise.next(next({ attempt : count, error : error, elapsed : stamp() - start}),function(_) {
					return attempt(count + 1);
				});
			};
			let ret = gen().flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					let d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
				case 1:
					let e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		};
		return attempt(1);
	}
	static ofJsPromise(promise) {
		return tink_core_Future.ofJsPromise(promise);
	}
	static toJsPromise(this1) {
		return new Promise(function(resolve,reject) {
			this1.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					let v = o.data;
					resolve(v);
					break;
				case 1:
					let e = o.failure;
					reject(new tink_core__$Promise_TinkError(e));
					break;
				}
			});
		});
	}
	static ofSpecific(s) {
		return s;
	}
	static ofFuture(f) {
		let ret = f.map(tink_core_Outcome.Success);
		return ret.gather();
	}
	static ofOutcome(o) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
	}
	static ofError(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
	static ofData(d) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
	}
	static lazy(p) {
		return tink_core_Future.async(function(cb) {
			p.get().handle(cb);
		},true);
	}
	static inParallel(a,concurrency,lazy) {
		if(a.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core_Future.async(function(cb) {
				let result = [];
				let pending = a.length;
				let links = null;
				let linkArray = [];
				let sync = false;
				let i = 0;
				let iter_current;
				let iter_array;
				iter_current = 0;
				iter_array = a;
				let next = null;
				let done = function(o) {
					if(links == null) {
						sync = true;
					} else if(links != null) {
						links.cancel();
					}
					cb(o);
				};
				let fail = function(e) {
					pending = 0;
					done(tink_core_Outcome.Failure(e));
				};
				let set = function(index,value) {
					result[index] = value;
					if((pending -= 1) == 0) {
						done(tink_core_Outcome.Success(result));
					} else if(iter_current < iter_array.length && pending > 0) {
						next();
					}
				};
				next = function() {
					i += 1;
					let index = i - 1;
					iter_current += 1;
					linkArray.push(iter_array[iter_current - 1].handle(function(o) {
						switch(o._hx_index) {
						case 0:
							let v = o.data;
							set(index,v);
							break;
						case 1:
							let e = o.failure;
							fail(e);
							break;
						}
					}));
				};
				while(true) {
					let tmp;
					if(iter_current < iter_array.length && pending > 0) {
						if(concurrency != null) {
							concurrency -= 1;
							tmp = concurrency + 1 > 0;
						} else {
							tmp = true;
						}
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					next();
				}
				links = tink_core_CallbackLink.fromMany(linkArray);
				if(sync) {
					if(links != null) {
						links.cancel();
					}
				}
			},lazy);
		}
	}
	static inSequence(a) {
		let loop = null;
		loop = function(index) {
			if(index == a.length) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
			} else {
				return tink_core_Promise.next(a[index],function(head) {
					return tink_core_Promise.next(loop(index + 1),function(tail) {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
					});
				});
			}
		};
		return loop(0);
	}
	static cache(gen) {
		let p = null;
		return function() {
			let ret = p;
			if(ret == null) {
				let sync = false;
				ret = tink_core_Promise.next(gen(),function(o) {
					o.b.handle(function(_) {
						sync = true;
						p = null;
					});
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
				});
				if(!sync) {
					p = ret;
				}
			}
			let ret1 = ret.map(function(o) {
				if(!tink_core_OutcomeTools.isSuccess(o)) {
					p = null;
				}
				return o;
			});
			return ret1.gather();
		};
	}
	static lift(p) {
		return p;
	}
	static trigger() {
		let this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	}
	static reject(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
}
class tink_core_Next {
	static ofSafe(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
		};
	}
	static ofSync(f) {
		return function(x) {
			let ret = f(x).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
		};
	}
	static _chain(a,b) {
		return function(v) {
			return tink_core_Promise.next(a(v),b);
		};
	}
}
class tink_core_Recover {
	static ofSync(f) {
		return function(e) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
		};
	}
}
class tink_core_Combiner {
	static ofSafe(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
		};
	}
	static ofSync(f) {
		return function(x1,x2) {
			let ret = f(x1,x2).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
		};
	}
}
class tink_core_PromiseTrigger {
	static _new() {
		let this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(this1,v) {
		return this1.trigger(tink_core_Outcome.Success(v));
	}
	static reject(this1,e) {
		return this1.trigger(tink_core_Outcome.Failure(e));
	}
	static asPromise(this1) {
		return this1;
	}
}
class tink_core__$Promise_TinkError extends Error {
	constructor(e) {
		super(e.message);
		this.data = e;
	}
}
tink_core__$Promise_TinkError.__name__ = true;
tink_core__$Promise_TinkError.__super__ = Error;
Object.assign(tink_core__$Promise_TinkError.prototype, {
	__class__: tink_core__$Promise_TinkError
});
class tink_core_Ref {
	static _new() {
		let this1 = new Array(1);
		let this2 = this1;
		return this2;
	}
	static get_value(this1) {
		return this1[0];
	}
	static set_value(this1,param) {
		return this1[0] = param;
	}
	static toString(this1) {
		return "@[" + Std.string(this1[0]) + "]";
	}
	static to(v) {
		let this1 = new Array(1);
		let this2 = this1;
		let ret = this2;
		ret[0] = v;
		return ret;
	}
}
class tink_core_Signal {
	static _new(f) {
		let this1 = new tink_core__$Signal_SimpleSignal(f);
		return this1;
	}
	static handle(this1,handler) {
		return this1.listen(handler);
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		let this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				tink_core_Callback.invoke(cb,f(result));
			});
		});
		let ret = this2;
		if(gather) {
			return tink_core_Signal.gather(ret);
		} else {
			return ret;
		}
	}
	static flatMap(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		let this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				f(result).handle(cb);
			});
		});
		let ret = this2;
		if(gather) {
			return tink_core_Signal.gather(ret);
		} else {
			return ret;
		}
	}
	static filter(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		let this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				if(f(result)) {
					tink_core_Callback.invoke(cb,result);
				}
			});
		});
		let ret = this2;
		if(gather) {
			return tink_core_Signal.gather(ret);
		} else {
			return ret;
		}
	}
	static select(this1,selector,gather) {
		if(gather == null) {
			gather = true;
		}
		let this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.listen(function(result) {
				let _g = selector(result);
				switch(_g._hx_index) {
				case 0:
					let v = _g.v;
					tink_core_Callback.invoke(cb,v);
					break;
				case 1:
					break;
				}
			});
		});
		let ret = this2;
		if(gather) {
			return tink_core_Signal.gather(ret);
		} else {
			return ret;
		}
	}
	static join(this1,other,gather) {
		if(gather == null) {
			gather = true;
		}
		let this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return new tink_core__$Callback_LinkPair(this1.listen(cb),other.listen(cb));
		});
		let ret = this2;
		if(gather) {
			return tink_core_Signal.gather(ret);
		} else {
			return ret;
		}
	}
	static nextTime(this1,condition) {
		let ret = new tink_core_FutureTrigger();
		let link = null;
		let immediate = false;
		link = this1.listen(function(v) {
			if(condition == null || condition(v)) {
				ret.trigger(v);
				if(link == null) {
					immediate = true;
				} else if(link != null) {
					link.cancel();
				}
			}
		});
		if(immediate) {
			if(link != null) {
				link.cancel();
			}
		}
		return ret;
	}
	static until(this1,end) {
		let ret = new tink_core__$Signal_Suspendable(function($yield) {
			let this2 = this1.listen($yield);
			if(this2 == null) {
				return tink_core_CallbackLink.noop;
			} else {
				return $bind(this2,this2.cancel);
			}
		});
		end.handle(tink_core_Callback.fromNiladic($bind(ret,ret.kill)));
		return ret;
	}
	static next(this1,condition) {
		return tink_core_Signal.nextTime(this1,condition);
	}
	static noise(this1) {
		return tink_core_Signal.map(this1,function(_) {
			return tink_core_Noise.Noise;
		});
	}
	static gather(this1) {
		let ret = tink_core_Signal.trigger();
		this1.listen(function(x) {
			ret.handlers.invoke(x);
		});
		return ret;
	}
	static generate(generator) {
		let ret = tink_core_Signal.trigger();
		generator($bind(ret,ret.trigger));
		return ret;
	}
	static trigger() {
		return new tink_core_SignalTrigger();
	}
	static create(create) {
		return new tink_core__$Signal_Suspendable(create);
	}
	static ofClassical(add,remove,gather) {
		if(gather == null) {
			gather = true;
		}
		let this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
			let f = function(a) {
				tink_core_Callback.invoke(cb,a);
			};
			add(f);
			let _g = remove;
			let a1 = f;
			let this1 = new tink_core_SimpleLink(function() {
				_g(a1);
			});
			return this1;
		});
		let ret = this1;
		if(gather) {
			return tink_core_Signal.gather(ret);
		} else {
			return ret;
		}
	}
}
class tink_core__$Signal_SimpleSignal {
	constructor(f) {
		this.f = f;
	}
	listen(cb) {
		return this.f(cb);
	}
}
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_SimpleSignal.prototype, {
	__class__: tink_core__$Signal_SimpleSignal
});
class tink_core__$Signal_Suspendable {
	constructor(activate) {
		this.killed = false;
		this.trigger = new tink_core_SignalTrigger();
		this.activate = activate;
	}
	kill() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	listen(cb) {
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.used == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		let _gthis = this;
		let _this = this.trigger.handlers;
		let node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		if(_this.used++ == 0) {
			_this.onfill();
		}
		let this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.used == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(node,this1);
	}
}
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_Suspendable.prototype, {
	__class__: tink_core__$Signal_Suspendable
});
class tink_core_SignalTrigger {
	constructor() {
		this.handlers = new tink_core_CallbackList();
	}
	trigger(event) {
		this.handlers.invoke(event);
	}
	getLength() {
		return this.handlers.used;
	}
	listen(cb) {
		let _this = this.handlers;
		let node = new tink_core__$Callback_ListCell(cb,_this);
		_this.cells.push(node);
		if(_this.used++ == 0) {
			_this.onfill();
		}
		return node;
	}
	clear() {
		this.handlers.clear();
	}
	asSignal() {
		return this;
	}
}
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core_SignalTrigger.prototype, {
	__class__: tink_core_SignalTrigger
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
examples_async_TestAwait.__meta__ = { obj : { await : null}, fields : { processAwait : { async : null}}};
tink_core_Callback.depth = 0;
tink_core_Callback.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core_Future.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core_Future.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core_Future.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_Lazy.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core_Progress.INIT = (function($this) {
	var $r;
	let this1 = new tink_core_MPair(0.0,haxe_ds_Option.None);
	$r = this1;
	return $r;
}(this));
tink_core_CompositeProgress._hx_skip_constructor = false;
tink_core_Promise.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core_Promise.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core_Promise.NEVER = (function($this) {
	var $r;
	let ret = tink_core_Future.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
examples_async_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
